@startuml

/''/

Annotatable <|-- Group
Transformable <|-- Group
Annotatable <|-- Editable
Alignable <|-- CannedText
Alignable <|-- Annotation
Scalable <|-- Transformable
Scalable <|-- Annotation
Transformable <|-- Element
Annotatable <|-- Element

interface Transformable {
  +Transform getTransform()
}

interface Scalable {
  +Pair<int> getScale()
  +void setScale(Pair<int>)
}

interface Annotatable {
  +Collection<Annotation> getAnnotations()
  ~void addAnnotation(Annotation annotation)
  ~void removeAnnotation(Annotation annotation)
  ~void removeAnnotation(int index)
}

interface Alignable {
  +void align(Alignment alignment)
}

interface Element {
  +getEditable()
}

class Annotation {
  -Alignment alignment
  -Pair<int> scale
  -String text

  ~Annotation()
  ~Annotation(Alignment alignment)
  ~void display()
  ~void hide()
  +String getText()
  ~String setText()
}

class CannedText {
  -String text
  -Alignment alignment

  ~CannedText(String text)
  ~CannedText(String text, Alignment alignment)
  +String getText()
}

class Group {
  -Collection<Editable> editables

  ~Group(Transform transform, Collection<Editable> editables)
  +getEditable()
  +getEditables()
}

class Editable {
  -Transform transform
  -Collection<Annotation> annotations

  ~Editable(Transform transform)
}

/''/

/''/
enum Alignment {
  LEFT RIGHT CENTER
}

class Pair<T> {
  -T x
  -T y

  ~Pair(T x, T y)
  ~T getX()
  ~T getY()
}

class Transform {
  -Pair<int> location
  -Pair<int> scale
  -Collection<Transform> children
  -Transform parent
  -Transform above
  -Transform below
  -bool isLocked

  ~Transform(Transform parent)
  ~void move(newX, newY)
  ~void sendAbove(Transform other)
  ~void sendBelow(Transform other)
  ~void sendToTop()
  ~void sendToBottom()
  +Pair<int> getGlobalLocation()
  ~void lock()
  ~void unlock()
}

class ErrorHandler {
  ~void displayError(String message)
  ~void displayFatalError(String message)
}

class Wireframe {
  -Collection<Transformable> transformables

  +add(Editable editable)
  +remove(Editable editable)
}

/''/


/''/

Element <|-- ImageElement
Element <|-- HeadlineElement
TextualElement <|-- TextElement
Element <|-- TextualElement
Element <|-- ParagraphElement
Element <|-- ComboBoxElement
Element <|-- ListElement
Element <|-- RoundedBoxElement

interface TextualElement {
  +CannedText getCannedText()
}

class ImageElement {
  -Image image

  ~ImageElement(Transform transform, Image image)
  +Image getImage()
}

class HeadlineElement {
  ~HeadlineElement(Transform transform)
}

class TextElement {
  ~TextElement(Transform transform, String cannedText)
}

class ParagraphElement {
  ~ParagraphElement(Transform transform)
}

class ComboBoxElement {
  -String[] possibleValues
  -short valueIndex

  ~ComboBox(Transform transform, String[] possibleValues)
  ~ComboBox(Transform transform, String[] possibleValues, short initialValueIndex)
  +String getValue()
  ~void setValue()
}

/''/
/''/

FractionalElement <|-- SliderElement
FractionalElement <|-- ProgressBarElement
FractionalElement <|-- ScrollBarElement
Element <|-- SliderElement
Element <|-- ProgressBarElement
Element <|-- ScrollBarElement

interface FractionalElement {
  +void setValue(float value)
  +float getValue()
}

class SliderElement {
  -float value

  ~SliderElement(Transform transform)
  ~SliderElement(Transform transform, float value)
}

class ProgressBarElement {
  -float value

  ~ProgressBarElement(Transform transform)
  ~ProgressBarElement(Transform transform, float value)
}

class ScrollBarElement {
  -float value

  ~ScrollBarElement(Transform transform)
  ~ScrollBarElement(Transform transform, float value)
}

/''/
/''/

class ListElement {
  -int length

  ~ListElement(Transform transform, int length)
  ~void add()
  ~void subtract()
  ~void clear()
}

class RoundedBoxElement {
  ~RoundedBoxElement(Transform transform)
}

/''/

@enduml
